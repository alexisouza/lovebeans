/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.lovebeans.editor.codecompletion;

/**
 *
 * @author Alexandre
 */
public class LoveFunctions {
    
    private static final String[] loveFunctions = {
        
        //Callbacks
        "love.draw()",
        "love.errhand(msg)",
        "love.focus(f)",
        "love.keypressed(key, isrepeat)",
        "love.keyreleased(key)",
        "love.load(arg)",
        "love.mousefocus(f)",
        "love.mousemoved(x, y, dx, dy)",
        "love.mousepressed(x, y, button)",
        "love.mousereleased(x, y, button)",
        "love.quit()",
        "love.resize(w, h)",
        "love.run()",
        "love.textinput(text)",
        "love.threaderror(thread, errorstr)",
        "love.update(dt)",
        "love.visible(v)",
        
        //Joystick
        "love.gamepadaxis( joystick, axis, value )",
        "love.gamepadpressed( joystick, button )",
        "love.gamepadreleased( joystick, button )",
        "love.joystickadded( joystick )",
        "love.joystickaxis( joystick, axis, value )",
        "love.joystickhat( joystick, hat, direction )",
        "love.joystickpressed( joystick, button )",
        "love.joystickreleased( joystick, button )",
        "love.joystickremoved( joystick )",
        
        //love.audio
        "love.audio.getDistanceModel()",
        "love.audio.getDopplerScale()",
        "love.audio.getOrientation()",
        "love.audio.getPosition()",
        "love.audio.getSourceCount()",
        "love.audio.getVelocity()",
        "love.audio.getVolume()",
        "love.audio.newSource( filename, type )",
        "love.audio.pause()",
        "love.audio.play( source )",
        "love.audio.resume()",
        "love.audio.rewind()",
        "love.audio.setDistanceModel( model )",
        "love.audio.setDopplerScale( scale )",
        "love.audio.setOrientation( fx, fy, fz, ux, uy, uz )",
        "love.audio.setPosition( x, y, z )",
        "love.audio.setVelocity( x, y, z )",
        "love.audio.setVolume( volume )",
        "love.audio.stop()",
        
        //love.event
        "love.event.clear()",
        "love.event.poll()",
        "love.event.pump()",
        "love.event.push()",
        "love.event.quit()",
        "love.event.wait()",
        
        //love.font
        "love.font.newGlyphData( rasterizer, glyph )",
        "love.font.newRasterizer( imageData, glyphs )",
        
        //love.graphics
        
        //Drawing
        "love.graphics.arc( mode, x, y, radius, angle1, angle2, segments )",
        "love.graphics.circle( mode, x, y, radius, segments )",
        "love.graphics.clear()",
        "love.graphics.draw( drawable, x, y, r, sx, sy, ox, oy, kx, ky )",
        "love.graphics.line( x1, y1, x2, y2, ... )",
        "love.graphics.point( x, y)",
        "love.graphics.polygon( mode, ... )",
        "love.graphics.present()",
        "love.graphics.print( text, x, y, r, sx, sy, ox, oy, kx, ky )",
        "love.graphics.printf( text, x, y, limit, align )",
        "love.graphics.rectangle( mode, x, y, width, height )",
        
        //Object Creation
        "love.graphics.newCanvas()",
        "love.graphics.newCanvas( width, height )",
        "love.graphics.newCanvas( width, height, format )",
        "love.graphics.newCanvas( width, height, format, msaa )",
        "love.graphics.newFont( filename, size )",
        "love.graphics.newFont( file, size )",
        "love.graphics.newFont( data, size )",
        "love.graphics.newFont( size )",
        "love.graphics.newImage( filename )",
        "love.graphics.newImage( imageData )",
        "love.graphics.newImage( compressedData )",
        "love.graphics.newImage( filename, format )",
        "love.graphics.newImageFont( filename, glyphs )",
        "love.graphics.newImageFont( data, glyphs )",
        "love.graphics.newImageFont( imageData, glyphs )",
        "love.graphics.newImageFont( image, glyphs )",
        "love.graphics.newMesh( vertices, texture, mode )",
        "love.graphics.newMesh( vertexcount, texture, mode )",
        "love.graphics.newParticleSystem( image, buffer )",
        "love.graphics.newParticleSystem( texture, buffer )",
        "love.graphics.newQuad( x, y, width, height, sw, sh )",
        "love.graphics.newScreenshot( )",
        "love.graphics.newScreenshot( copyAlpha )",
        "love.graphics.newShader( code )",
        "love.graphics.newShader( pixelcode, vertexcode )",
        "love.graphics.newSpriteBatch( image, size )",
        "love.graphics.newSpriteBatch( image, size, usagehint )",
        "love.graphics.newSpriteBatch( texture, size, usagehint )",
        "love.graphics.setNewFont( size )",
        "love.graphics.setNewFont( filename, size )",
        "love.graphics.setNewFont( file, size )",
        "love.graphics.setNewFont( data, size )",
        "love.graphics.setNewFont( rasterizer )",
        
        //Graphics State
        "love.graphics.getBackgroundColor( )",
        "love.graphics.getBlendMode( )",
        "love.graphics.getCanvas( )",
        "love.graphics.getCanvasFormats( )",
        "love.graphics.getColor( )",
        "love.graphics.getColorMask( )",
        "love.graphics.getCompressedImageFormats( )",
        "love.graphics.getDefaultFilter( )",
        "love.graphics.getFont( )",
        "love.graphics.getLineJoin( )",
        "love.graphics.getLineStyle( )",
        "love.graphics.getLineWidth( )",
        "love.graphics.getPointSize( )",
        "love.graphics.getPointStyle( )",
        "love.graphics.getRendererInfo( )",
        "love.graphics.getScissor( )",
        "love.graphics.getShader( )",
        "love.graphics.getStats( )",
        "love.graphics.getSystemLimit( limittype )",
        "love.graphics.isSupported( support1, support2, support3, ... )",
        "love.graphics.isWireframe( )",
        "love.graphics.reset( )",
        "love.graphics.setBackgroundColor( red, green, blue )",
        "love.graphics.setBackgroundColor( red, green, blue, alpha )",
        "love.graphics.setBackgroundColor( rgb )",
        "love.graphics.setBackgroundColor( rgba )",
        "love.graphics.setBlendMode( mode )",
        "love.graphics.setCanvas( canvas )",
        "love.graphics.setCanvas( )",
        "love.graphics.setCanvas( canvas1, canvas2, ... )",
        "love.graphics.setColor( red, green, blue, alpha )",
        "love.graphics.setColor( rgba )",
        "love.graphics.setColorMask( red, green, blue, alpha )",
        "love.graphics.setColorMask( )",
        "love.graphics.setDefaultFilter( min, mag, anisotropy )",
        "love.graphics.setFont( font )",
        "love.graphics.setInvertedStencil( stencilFunction )",
        "love.graphics.setInvertedStencil( )",
        "love.graphics.setLineJoin( join )",
        "love.graphics.setLineStyle( style )",
        "love.graphics.setLineWidth( width )",
        "love.graphics.setPointSize( size )",
        "love.graphics.setPointStyle( style )",
        "love.graphics.setScissor( x, y, width, height )",
        "love.graphics.setScissor( )",
        "love.graphics.setShader( shader )",
        "love.graphics.setShader( )",
        "love.graphics.setStencil( stencilFunction )",
        "love.graphics.setStencil( )",
        "love.graphics.setWireframe( enable )",
        
        //Coordinate System
        "love.graphics.origin()",
        "love.graphics.pop()",
        "love.graphics.push( )",
        "love.graphics.push( stack )",
        "love.graphics.rotate( angle )",
        "love.graphics.scale( sx, sy )",
        "love.graphics.shear( kx, ky )",
        "love.graphics.translate( dx, dy )",
        
        //Window
        "love.graphics.getDimensions( )",
        "love.graphics.getHeight( )",
        "love.graphics.getWidth( )",
        
        //love.image
        "love.image.isCompressed( filename )",
        "love.image.isCompressed( fileData )",
        "love.image.newCompressedData( filename )",
        "love.image.newCompressedData( fileData )",
        "love.image.newImageData( width, height )",
        "love.image.newImageData( filename )",
        "love.image.newImageData( filedata )",
        
        //love.joysticks
        "love.joystick.getJoystickCount( )",
        "love.joystick.getJoysticks( )",
        "love.joystick.loadGamepadMappings( filename )",
        "love.joystick.loadGamepadMappings( mappings )",
        "love.joystick.saveGamepadMappings( filename )",
        "love.joystick.saveGamepadMappings( )",
        "love.joystick.setGamepadMapping( guid, button, inputtype, inputindex, hatdir )",
        "love.joystick.setGamepadMapping( guid, axis, inputtype, inputindex, hatdir )",
        
        //love.keyboard
        "love.keyboard.getKeyFromScancode( scancode )",
        "love.keyboard.getScancodeFromKey( key )",
        "love.keyboard.hasKeyRepeat( )",
        "love.keyboard.hasTextInput( )",
        "love.keyboard.isDown( key )",
        "love.keyboard.isDown( key1, key2, key3, ... )",
        "love.keyboard.setKeyRepeat( enable )",
        "love.keyboard.setTextInput( enable )",
        
        //love.math
        "love.math.gammaToLinear( r, g, b )",
        "love.math.gammaToLinear( color )",
        "love.math.gammaToLinear( c )",
        "love.math.getRandomSeed( )",
        "love.math.isConvex( vertices )",
        "love.math.isConvex( x1, y1, x2, y2, x3, y3, ... )",
        "love.math.linearToGamma( lr, lg, lb )",
        "love.math.linearToGamma( color )",
        "love.math.linearToGamma( lc )",
        "love.math.newBezierCurve( vertices )",
        "love.math.newBezierCurve( x1, y1, x2, y2, x3, y3, ... )",
        "love.math.newRandomGenerator( )",
        "love.math.newRandomGenerator( seed )",
        "love.math.newRandomGenerator( low, high )",
        "love.math.noise( x )",
        "love.math.noise( x, y )",
        "love.math.noise( x, y, z )",
        "love.math.noise( x, y, z, w )",
        "love.math.random( )",
        "love.math.random( max )",
        "love.math.random( min, max )",
        "love.math.randomNormal( stddev, mean )",
        "love.math.setRandomSeed( seed )",
        "love.math.setRandomSeed( low, high )",
        "love.math.triangulate( polygon )",
        "love.math.triangulate( x1, y1, x2, y2, x3, y3, ... )",
        
        //love.mouse
        "love.mouse.getCursor( )",
        "love.mouse.getPosition( )",
        "love.mouse.getRelativeMode( )",
        "love.mouse.getSystemCursor( ctype )",
        "love.mouse.getX( )",
        "love.mouse.getY( )",
        "love.mouse.isDown( button )",
        "love.mouse.isDown( button1, button2, button3, ... )",
        "love.mouse.isGrabbed( )",
        "love.mouse.isVisible( )",
        "love.mouse.newCursor( imageData, hotx, hoty )",
        "love.mouse.newCursor( filename, hotx, hoty )",
        "love.mouse.newCursor( fileData, hotx, hoty )",
        "love.mouse.setCursor( cursor )",
        "love.mouse.setCursor( )",
        "love.mouse.setGrabbed( grab )",
        "love.mouse.setPosition( x, y )",
        "love.mouse.setRelativeMode( enable )",
        "love.mouse.setVisible( visible )",
        "love.mouse.setX( x )",
        "love.mouse.setY( y )",
        
        //love.physics
        "love.physics.getDistance( fixture1, fixture2 )",
        "love.physics.getMeter( )",
        "love.physics.newBody( world, x, y, type )",
        "love.physics.newChainShape( loop, x1, y1, x2, y2, ... )",
        "love.physics.newCircleShape( radius )",
        "love.physics.newCircleShape( x, y, radius )",
        "love.physics.newDistanceJoint( body1, body2, x1, y1, x2, y2, collideConnected )",
        "love.physics.newEdgeShape( x1, y1, x2, y2 )",
        "love.physics.newFixture( body, shape, density )",
        "love.physics.newFrictionJoint( body1, body2, x, y, collideConnected )",
        "love.physics.newFrictionJoint( body1, body2, x1, y1, x2, y2, collideConnected )",
        "love.physics.newGearJoint( joint1, joint2, ratio, collideConnected )",
        "love.physics.newMouseJoint( body, x, y )",
        "love.physics.newPolygonShape( x1, y1, x2, y2, x3, y3, ... )",
        "love.physics.newPrismaticJoint( body1, body2, x, y, ax, ay, collideConnected )",
        "love.physics.newPrismaticJoint( body1, body2, x1, y1, x2, y2, ax, ay, collideConnected )",
        "love.physics.newPulleyJoint( body1, body2, gx1, gy1, gx2, gy2, x1, y1, x2, y2, ratio, collideConnected )",
        "love.physics.newRectangleShape( width, height )",
        "love.physics.newRectangleShape( x, y, width, height, angle )",
        "love.physics.newRevoluteJoint( body1, body2, x, y, collideConnected )",
        "love.physics.newRopeJoint( body1, body2, x1, y1, x2, y2, maxLength, collideConnected )",
        "love.physics.newWeldJoint( body1, body2, x, y, collideConnected )",
        "love.physics.newWeldJoint( body1, body2, x1, y1, x2, y2, collideConnected )",
        "love.physics.newWheelJoint( body1, body2, x, y, ax, ay, collideConnected )",
        "love.physics.newWheelJoint( body1, body2, x1, y1, x2, y2, ax, ay, collideConnected )",
        "love.physics.newWorld( xg, yg, sleep )",
        "love.physics.newWorld( x1, y1, x2, y2, xg, yg, sleep )",
        "love.physics.setMeter( scale )",
        
        //love.sound
        "love.sound.newDecoder( file, buffer )",
        "love.sound.newDecoder( filename, buffer )",
        "love.sound.newSoundData( filename )",
        "love.sound.newSoundData( file )",
        "love.sound.newSoundData( decoder )",
        "love.sound.newSoundData( samples, rate, bits, channels )",
        
        //love.system
        "love.system.getClipboardText( )",
        "love.system.getOS( )",
        "love.system.getPowerInfo( )",
        "love.system.getProcessorCount( )",
        "love.system.openURL( url )",
        "love.system.setClipboardText( text )",
        
        //love.thread
        "love.thread.getChannel( name )",
        "love.thread.newChannel( )",
        "love.thread.newThread( filename )",
        "love.thread.newThread( fileData )",
        "love.thread.newThread( codestring )",
        
        //love.timer
        "love.timer.getAverageDelta( )",
        "love.timer.getDelta( )",
        "love.timer.getFPS( )",
        "love.timer.getTime( )",
        "love.timer.sleep( s )",
        "love.timer.step( )",
        
        //love.window
        "love.window.fromPixels( pixelvalue )",
        "love.window.fromPixels( px, py )",
        "love.window.getDesktopDimensions( display )",
        "love.window.getDisplayCount( )",
        "love.window.getDisplayName( displayindex )",
        "love.window.getFullscreen( )",
        "love.window.getFullscreenModes( display )",
        "love.window.getIcon( )",
        "love.window.getMode( )",
        "love.window.getPixelScale( )",
        "love.window.getPosition( )",
        "love.window.getTitle( )",
        "love.window.hasFocus( )",
        "love.window.hasMouseFocus( )",
        "love.window.isCreated( )",
        "love.window.isVisible( )",
        "love.window.minimize( )",
        "love.window.setFullscreen( fullscreen )",
        "love.window.setFullscreen( fullscreen, fstype )",
        "love.window.setIcon( imagedata )",
        "love.window.setMode( width, height, flags )",
        "love.window.setPosition( x, y, display )",
        "love.window.setTitle( title )",
        "love.window.showMessageBox( title, message, type, attachtowindow )",
        "love.window.showMessageBox( title, message, buttonlist, type, attachtowindow )",
        "love.window.toPixels( value )",
        "love.window.toPixels( x, y )",
        
    };
    
    public static String[] getFunctions() {
        return loveFunctions;
        
    }
    
}
